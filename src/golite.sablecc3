Package golite;

Helpers
	/* regular expression matching all valid 16-bit characters */
	any = [0..0xFFFF];
 	tab   = 9;
	cr    = 13;
	lf    = 10;
	eol   = cr | lf | cr lf;
	blank = (' ' | tab | eol)+;
	digit = ['0'..'9'];
	lowercase = ['a'..'z'];
	uppercase = ['A'..'Z'];
	letter  = lowercase | uppercase;
	idletter = letter | '_';
	idchar  = letter | '_' | digit;

Tokens
	/* Characters */
	blank = blank;
	pound = '#';
	ampersand = '&';
	vertbar = '|';
	hat   = '^';
	star  = '*';
	fslash = '/';
	bslash = '\';
	plus  = '+';
	minus = '-';
	percent = '%';
	equal = '=';
	colon = ':';
	semicolon = ';';
	anglel = '<';
	angler = '>';
	parenl = '(';
	parenr = ')';
	squarel = '[';
	squarer = ']';
	curlyl = '{';
	curlyr = '}';

	int_lit  = '0' | [digit-'0'] digit*;
	float_lit = ('0' | [digit-'0'] digit*) '.' digit+;

	/* Keywords */
	import = 'import';
	package = 'package';
	chan = 'chan';
	const = 'const';
	default = 'default';
	defer = 'defer';
	var = 'var';
	type = 'type';
	struct = 'struct';
	interface = 'interface';
	func = 'func';
	return = 'return';
	if = 'if';
	else = 'else';
	switch = 'switch';
	case = 'case';
	goto = 'goto';
	for = 'for';
	break = 'break';
	continue = 'continue';
	fallthrough = 'fallthrough';
	go = 'go';
	map = 'map';
	range = 'range';
	select = 'select';
	print = 'print';
	append = 'append';
	println = 'println';
	bool = 'bool';
	int = 'int';
	float64 = 'float64';
	rune = 'rune';
	string = 'string';

	/* Comments */

	commentl = '#' [any-lf]* eol;
	commentb= '/*' any* '*/';

	/* Literals */

	/* Identifiers*/
	id = idletter idchar*;


Ignored Tokens
	blank, commentl, commentb;

Productions
	program = package_dec declaration* {-> New program(package_dec.id, [declaration])};

	package_dec {-> id} = package id semicolon {-> id};

	declaration = {variable_dec} var id type? equal exp semicolon {-> New declaration.variable_dec(id, type, exp)};

	exp =
		  {variable} id
		| {int_lit} int_lit
		| {float_lit} float_lit;

Abstract Syntax Tree
	program = [package_name]:id [declarations]:declaration*;

	declaration = {variable_dec} id type? exp?;

	exp =
		  {variable} id
		| {int_lit} int_lit
		| {float_lit} float_lit;
