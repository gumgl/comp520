/* This file was generated by SableCC (http://www.sablecc.org/). */

package golite.analysis;

import java.util.*;
import golite.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACstGrammar(ACstGrammar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChan(TChan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefer(TDefer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInterface(TInterface node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunc(TFunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFallthrough(TFallthrough node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGo(TGo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMap(TMap node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRange(TRange node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSelect(TSelect node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAppend(TAppend node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrintln(TPrintln node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloat64(TFloat64 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRune(TRune node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipe(TPipe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLshift(TLshift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRshift(TRshift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpCaret(TAmpCaret node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusEq(TPlusEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusEq(TMinusEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStarEq(TStarEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashEq(TSlashEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercentEq(TPercentEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpEq(TAmpEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPipeEq(TPipeEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaretEq(TCaretEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLshiftEq(TLshiftEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRshiftEq(TRshiftEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpCaretEq(TAmpCaretEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLarrow(TLarrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqEq(TEqEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExclamation(TExclamation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEq(TNotEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLtEq(TLtEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGtEq(TGtEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColonEq(TColonEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElipsis(TElipsis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenL(TParenL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenR(TParenR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSquareL(TSquareL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSquareR(TSquareR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBraceL(TBraceL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBraceR(TBraceR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitInt(TLitInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitOctal(TLitOctal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitHex(TLitHex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitFloat(TLitFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitRune(TLitRune node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitRaw(TLitRaw node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLitInterpreted(TLitInterpreted node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
